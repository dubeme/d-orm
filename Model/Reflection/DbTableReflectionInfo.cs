using System;
using System.Collections.Generic;
using System.Linq;

namespace DamnORM.Model.Reflection
{
    internal class DbTableReflectionInfo<T>
    {
        private IDictionary<string, DbColumnReflectionInfo> _Columns;

        public Type BackingType
        {
            get
            {
                return typeof(T);
            }
        }

        public DbColumnReflectionInfo this[string column]
        {
            get
            {
                return _Columns[column];
            }
        }

        public string TableName { get; set; }

        public IEnumerable<DbColumnReflectionInfo> Columns
        {
            get
            {
                if (this._Columns == null)
                    return Enumerable.Empty<DbColumnReflectionInfo>();

                return _Columns.Values;
            }
            set
            {
                if (value != default(IEnumerable<DbColumnReflectionInfo>))
                {
                    _Columns = value.ToDictionary(colInfo => colInfo.Attribute.ColumnName);
                }
            }
        }

        public IEnumerable<DbColumnReflectionInfo> AutoGeneratedColumns
        {
            get
            {
                return this.Columns.Where(column => column.Attribute.IsAutogenerated);
            }
        }

        public IEnumerable<DbColumnReflectionInfo> NonAutoGeneratedColumns
        {
            get
            {
                return this.Columns.Where(column => !column.Attribute.IsAutogenerated);
            }
        }

        public DbColumnReflectionInfo AutoGeneratedColumn
        {
            get
            {
                return this.Columns.Where(column => column.Attribute.IsAutogenerated).FirstOrDefault();
            }
        }

        public IEnumerable<string> ColumnNames
        {
            get
            {
                return this.Columns.Select(column => column.Attribute.ColumnName);
            }
        }

        public IEnumerable<string> AutoGeneratedColumnNames
        {
            get
            {
                return this.AutoGeneratedColumns.Select(column => column.Attribute.ColumnName);
            }
        }

        public IEnumerable<string> NonAutoGeneratedColumnNames
        {
            get
            {
                return this.NonAutoGeneratedColumns.Select(column => column.Attribute.ColumnName);
            }
        }
    }
}