using DamnORM.Model.Exceptions;
using DamnORM.Model.Reflection;

namespace DamnORM.Helpers
{
    /// <summary>
    /// Performs validation on table column data
    /// </summary>
    public class DataValidationHelper
    {
        /// <summary>
        /// Asserts the strings not too long.
        /// </summary>
        /// <typeparam name="T">The type</typeparam>
        /// <param name="info">The metadata for the table of interest.</param>
        /// <param name="items">The objects/items/values to be inserted into the table.</param>
        /// <exception cref="MaxLengthException">String exceeds max length</exception>
        internal static void AssertStringsNotTooLong<T>(DbTableReflectionInfo<T> info, params T[] items)
        {
            foreach (var column in info.NonAutoGeneratedColumns)
            {
                if (column.BackingPropertyType == typeof(string))
                {
                    foreach (var item in items)
                    {
                        var val = ReflectionHelper.GetPropertyValue(item, column.BackingPropertyName) as string;

                        if (!string.IsNullOrWhiteSpace(val) && val.Length > column.Attribute.MaxLength)
                        {
                            throw new MaxLengthException(
                                column.Attribute.UserFriendlyName,
                                column.Attribute.MaxLength,
                                val.Length);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Asserts the string not too long.
        /// </summary>
        /// <param name="column">The metadata of the column of interest.</param>
        /// <param name="item">The item/value to be inserted in the column.</param>
        /// <exception cref="MaxLengthException">String exceeds max length</exception>
        internal static void AssertStringNotTooLong(DbColumnReflectionInfo column, object item)
        {
            if (column.BackingPropertyType == typeof(string))
            {
                var val = item as string;

                if (!string.IsNullOrWhiteSpace(val) && val.Length > column.Attribute.MaxLength)
                {
                    throw new MaxLengthException(
                        column.Attribute.UserFriendlyName,
                        column.Attribute.MaxLength,
                        val.Length);
                }
            }
        }
    }
}